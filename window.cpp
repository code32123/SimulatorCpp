#include "window.h"

Window::Window() {
	forceScreenUpdate = false;
	running = false;
	debugEveryStep = false;
	QBoxLayout *mainLayout = new QBoxLayout(QBoxLayout::TopToBottom);

	imageMap = new QImage(QSize(512, 512), QImage::Format_RGB32);
	imageMap->fill(0);
	imgDisplayLabel = new QLabel("");
	imgDisplayLabel->setPixmap(QPixmap::fromImage(*imageMap));
	imgDisplayLabel->adjustSize();

	//	fpsLabel = new QLabel(this); //("FPS: ");
	//	fpsLabel->setText("FPS: ");
	debugLabel = new QLabel("FPS: ");
	debugLabel->move(0, 0);

	mainLayout->addWidget(debugLabel);
	mainLayout->addWidget(imgDisplayLabel);

	setLayout(mainLayout);

	QTimer *timer = new QTimer(this);
	connect(timer, &QTimer::timeout, this, &Window::animateOneStep);
	timer->start(); // Change to 0 for full speeeeed!

	QTimer *fpstimer = new QTimer(this);
	connect(fpstimer, &QTimer::timeout, this, &Window::fpsUpdate);
	fpstimer->start(1000);

	setWindowTitle(tr("Textures"));
	t = 0;
	cacheTime = QDateTime::currentSecsSinceEpoch();
	cacheFrame = 0;

	processor = new cpu();

	std::ifstream hexFile;
	hexFile.open(
		"C:/Users/jimmy/Desktop/Coding/8Bit CPU/Ghost/programs/stringPrint/StringPrint.hex"); // 96637
	//	hexFile.open("C:/Users/jimmy/Desktop/Coding/8Bit CPU/Ghost/programs/ColorModeTest.hex");
	std::string fileContents;
	if (hexFile.is_open()) {
		char curr_char;
		while (hexFile) {
			curr_char = hexFile.get();
			if (curr_char == EOF)
				break;
			fileContents += curr_char;
			// std::cout << curr_char;
		}
	}
	processor->loadToMemory(fileContents);

	//	processor->loadToMemory(
	//		"0x0008 0xfa50 0x0085 0x0005 0x00ff 0x0088 0x008c 0x0090 0x0089 0x0086");
	//	processor->loadToMemory("0x0085 0x0017 0x0085 0x000b 0x0085 0x0039 0x0085 0x00d2 \
//0x0066 0x0002 0x00ff 0x0088 0x0008 0x0000 0x0085 0x009b \
//0x002c 0x0078 0x1000 0x00d2 0x000e 0x0089 0x0086 0x0088 \
//0x0004 0x9fff 0x0085 0x013c 0x00a4 0x0004 0x00a5 0x0004 \
//0x008d 0x008c 0x0085 0x0145 0x000c 0x0161 0x0085 0x005a \
//0x00cd 0x00d2 0x0035 0x0090 0x0091 0x000a 0x0151 0x0007 \
//0x0150 0x0085 0x00fc 0x0089 0x0086 0x0090 0x0091 0x0066 \
//0x0017 0x0088 0x0003 0x014a 0x014b 0x0004 0x0162 0x002c \
//0x000c 0x0162 0x0004 0x0163 0x002c 0x000c 0x0163 0x0060 \
//0x009d 0x0011 0x014a 0x002c 0x0060 0x0095 0x006d 0x0161 \
//0x00d4 0x0091 0x008d 0x0090 0x0085 0x007b 0x0085 0x0072 \
//0x0089 0x0086 0x0088 0x000c 0x0149 0x0005 0x0162 0x0061 \
//0x009e 0x006e 0x0149 0x00d2 0x006e 0x002d 0x0075 0x0163 \
//0x00d2 0x005f 0x0089 0x0009 0x0000 0x0086 0x0089 0x0009 \
//0x0001 0x0086 0x0088 0x0085 0x005a 0x00cd 0x00d2 0x007a \
//0x0089 0x0086 0x00ff 0x0088 0x0085 0x013c 0x0070 0x00ff \
//0x00d2 0x0090 0x0071 0x00ff 0x00d2 0x0090 0x0070 0x0010 \
//0x00d2 0x0090 0x0071 0x0010 0x00d2 0x0090 0x0089 0x0086 \
//0x00ff 0x0088 0x0004 0x0162 0x0030 0x000c 0x0162 0x0085 \
//0x0017 0x0089 0x0086 0x0088 0x00d1 0x9f00 0x00d4 0x00ae \
//0x00d1 0x9f01 0x00d4 0x00b7 0x00d1 0x9f02 0x00d4 0x00c0 \
//0x00d1 0x9f03 0x00d4 0x00c9 0x0089 0x0086 0x0004 0x014b \
//0x0070 0x0001 0x008a 0x0001 0xffff 0x014a 0x0086 0x0004 \
//0x014b 0x0070 0xffff 0x008a 0x0001 0x0001 0x014a 0x0086 \
//0x0004 0x014b 0x0070 0x0100 0x008a 0x0001 0xff00 0x014a \
//0x0086 0x0004 0x014b 0x0070 0xff00 0x008a 0x0001 0x0100 \
//0x014a 0x0086 0x0088 0x0004 0x0162 0x0030 0x0060 0x009c \
//0x0085 0x013c 0x000a 0x0151 0x000b 0x0000 0x0085 0x00fc \
//0x0004 0x0163 0x008c 0x0060 0x009c 0x0085 0x013c 0x000a \
//0x0151 0x0007 0x014f 0x0085 0x00fc 0x0090 0x002c 0x0060 \
//0x009c 0x0085 0x013c 0x000a 0x0159 0x0007 0x014f 0x0085 \
//0x00fc 0x0089 0x0002 0x0086 0x0088 0x00a0 0x0003 0x00a1 \
//0x0003 0x000c 0x014c 0x000d 0x014d 0x000e 0x014e 0x000a \
//0x0000 0x0072 0x0008 0x00d2 0x0136 0x0009 0x0000 0x0004 \
//0x014d 0x00ba 0x00a0 0x0007 0x0014 0xa000 0x0010 0x014c \
//0x00b9 0x0088 0x0004 0x014e 0x00ba 0x0060 0x009c 0x0085 \
//0x0138 0x0065 0x012a 0x0068 0x00d3 0x0089 0x0060 0x0097 \
//0x0066 0x012b 0x0089 0x002d 0x0065 0x0133 0x0071 0x0008 \
//0x00d3 0x0066 0x010f 0x002e 0x0066 0x0109 0x0089 0x0086 \
//0x00c5 0x00a4 0x000f 0x0086 0x008c 0x00a4 0x0008 0x0091 \
//0x00a1 0x0008 0x00a5 0x0008 0x0086 0x00a0 0x0008 0x00b9 \
//0x0086 0x0000 0x0100 0x0100 0x0000 0x0000 0x0000 0x07e0 \
//0xf800 0x7c00 0xfe00 0xfe00 0xfe00 0xfe00 0xfe00 0x7c00 \
//0x0000 0x7c00 0x8200 0x8200 0x8200 0x8200 0x8200 0x7c00 \
//0x0000 0x0000 0x0164 0x0166 0x0104 0x0204 0x0304 0x0404 \
//0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 \
//0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 \
//0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 \
//0x0000 0x0000 0x0000 0x0000 ");
}
void Window::animateOneStep() {
	if (running) {
		t++;

		processor->tick(*imageMap);
		if (processor->shouldUpdate() or forceScreenUpdate) {
			imgDisplayLabel->setPixmap(QPixmap::fromImage(*imageMap));
		}
	}
}
void Window::fpsUpdate() {
	int currentTime = QDateTime::currentSecsSinceEpoch();
	if (currentTime - cacheTime == 0) {
		return;
	}
	QString flags = (running ? "RUN | " : "STP | ") + QString(debugEveryStep ? "DBG | " : "")
					+ (processor->halted ? "HLT | " : "")
					+ QString(processor->broken ? "BRK | " : "");
	debugLabel->setText(flags
						+ "FPS: " + QString::number((t - cacheFrame) / (currentTime - cacheTime))
						+ "                   Proc t: " + QString::number(processor->T()));
	// Δf/Δs
	cacheTime = currentTime;
	cacheFrame = t;
}
